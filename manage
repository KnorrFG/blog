#! /usr/bin/env python

import sys
from pathlib import Path
import subprocess as sp
import atexit
import shutil
import time
import datetime as dt
import markdown as md
import mdx_mathjax

files_to_watch = [
    Path("index.html"), 
    Path("post_snippet_template.html"), 
    Path("assets"),
    Path("post_template.html")] \
            + list(Path().glob("posts/*.md")) \
            + list(Path().glob("*.css"))


def main():
    match sys.argv[1:]:
        case ["-d", path]:
            make_dist(Path(path))
        case ["-s"]:
            serve()


def serve():
    dist_dir = Path("/tmp/bloghost")
    make_dist(dist_dir)

    server_handle = sp.Popen("python -m http.server 8080".split(),
            cwd=dist_dir)
    atexit.register(server_handle.kill)

    change_tss = { file: file.stat().st_mtime
            for file in files_to_watch }

    while True:
        for file, last_updt in change_tss.items():
            last_updt_new = file.stat().st_mtime 
            if last_updt_new > last_updt:
                dist_path(dist_dir, file)

                change_tss[file] = last_updt_new
        time.sleep(0.3)


def dist_path(dist_dir, path: Path):
    if path.is_file() and path.name in ("index.html",
            "post_snippet_template.html"):
        render_index(dist_dir)
    elif path.is_dir():
        shutil.copytree(path, dist_dir/path, dirs_exist_ok=True)
    elif path.name.endswith(".css"):
        shutil.copy(path, dist_dir / path)
    elif path.name.endswith(".md") :
        render_index(dist_dir)
        render_article(dist_dir, path)
    elif path.name == 'post_template.html':
        for f in Path().glob('posts/*.md'):
            render_article(dist_dir, f)
    else:
        raise RuntimeError("Can't handle that yet: ", str(path))


def render_article(dist_dir: Path, path):
    article_template = Path('post_template.html').read_text()
    post = parse_post(path.read_text(), path)
    article = article_template.format(**post)
    dist_dir.joinpath(path).with_suffix(".html").write_text(article)


def render_index(dist_dir):
    index = Path("index.html").read_text()
    post_template = Path("post_snippet_template.html").read_text()

    post_snippets = [ parse_post(post.read_text(), post)
            for post in Path().glob("posts/*.md")]

    post_snippets.sort(key=lambda d: int(dt.datetime.timestamp(d["dt"])), 
            reverse=True)

    post_snippets = [post_template.format(**data)
            for data in post_snippets]

    index = index.replace("{articles}", "\n".join(post_snippets))
    dist_dir.joinpath("index.html").write_text(index)


def parse_post(s: str, link):
    lines = s.splitlines()
    stripped_lines = list(map(str.strip, lines))
    header_start = stripped_lines.index("---")
    header_end = stripped_lines.index("---", header_start + 1)
    header = stripped_lines[header_start + 1: header_end]

    keys = "title excerpt_sep excerpt categories tags".split()
    result = {k: None for k in keys}
    for line in header:
        match [s.strip() for s in line.split(':')]:
            case ['title', t]:
                result["title"] = t
            case ['excerpt_separator', e]:
                result['excerpt_sep'] = e.strip()
            case ["categories", c]:
                result['categories'] = c.split()
            case ["tags", t]:
                result["tags"] = t.split()

    if result['excerpt_sep'] is not None:
        print(link)
        excerpt_end = lines.index(result['excerpt_sep'])
        excerpt_md = "\n".join(l for l in lines[header_end + 1: excerpt_end]
                if not l.strip().startswith('#'))
        result['excerpt'] = md_2_html(excerpt_md + 
            f' [...]({link.with_suffix(".html")})')

    result['post'] = md_2_html('\n'.join(lines[header_end + 1:]))
    result['dt'] = dt.datetime.strptime(link.name[:10], "%Y-%m-%d")
    result['link'] = str(link.with_suffix(".html"))
    result['date'] = result['dt'].date()
    return result


def md_2_html(s):
    return md.markdown(s, extensions=["extra", "codehilite", "mdx_mathjax"])


def make_dist(dist_dir: Path):
    dist_dir.mkdir(parents=True, exist_ok=True)
    (dist_dir / 'posts').mkdir(parents=True, exist_ok=True)

    render_index(dist_dir)

    for path in Path().iterdir():
        if path.is_dir():
            shutil.copytree(path, dist_dir/path, dirs_exist_ok=True)
        if path.is_file() and path.suffix == ".css":
            shutil.copy(path, dist_dir / path)

    for path in Path().glob("posts/*.md"):
        render_article(dist_dir, path)
        

if __name__ == "__main__":
    main()
